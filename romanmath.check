#include "romanmath.h"

#test aTest
	ck_assert_int_eq( 1, 1 );

#test convertRoman
	ck_assert_int_eq( romanToInt("I"), 1);
	ck_assert_int_eq( romanToInt("II"), 2);
	ck_assert_int_eq( romanToInt("III"), 3);
	ck_assert_int_eq( romanToInt("IV"), 4);
	ck_assert_int_eq( romanToInt("V"), 5);
	ck_assert_int_eq( romanToInt("VI"), 6);
	ck_assert_int_eq( romanToInt("VII"), 7);
	ck_assert_int_eq( romanToInt("VIII"), 8);
	ck_assert_int_eq( romanToInt("IX"), 9);
	ck_assert_int_eq( romanToInt("X"), 10);
	ck_assert_int_eq( romanToInt("L"), 50);
	ck_assert_int_eq( romanToInt("C"), 100);
	ck_assert_int_eq( romanToInt("D"), 500);
	ck_assert_int_eq( romanToInt("M"), 1000);
	ck_assert_int_eq( romanToInt("MMDXVI"), 2516);

#test convertRomanInvalids
	ck_assert_int_eq( romanToInt("IIII"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("VVV"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("VV"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("XXXX"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("LL"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("CCCC"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("DD"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("MMMMM"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt(""), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("W"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("WII"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("VX"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("VL"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("VD"), INVALID_ROMAN_NUMERAL);
	ck_assert_int_eq( romanToInt("VM"), INVALID_ROMAN_NUMERAL);


#test sumRomanNumeralsInt
	ck_assert_int_eq( romanSumInt("I", "I"), 2);
	ck_assert_int_eq( romanSumInt("XIV", "LX"), 74);

#test sumRomanNumerals
	ck_assert_str_eq( romanSum("I", "I"), "II");
	ck_assert_str_eq( romanSum("XIV", "LX"), "LXXIV");

#test convertIntToRoman
	ck_assert_str_eq( intToRoman(1), "I");
	ck_assert_str_eq( intToRoman(2), "II");
	ck_assert_str_eq( intToRoman(3), "III");
	ck_assert_str_eq( intToRoman(4), "IV");
	ck_assert_str_eq( intToRoman(5), "V");
	ck_assert_str_eq( intToRoman(6), "VI");
	ck_assert_str_eq( intToRoman(7), "VII");
	ck_assert_str_eq( intToRoman(8), "VIII");
	ck_assert_str_eq( intToRoman(9), "IX");
	ck_assert_str_eq( intToRoman(10), "X");
	ck_assert_str_eq( intToRoman(11), "XI");
	ck_assert_str_eq( intToRoman(21), "XXI");
	ck_assert_str_eq( intToRoman(31), "XXXI");
	ck_assert_str_eq( intToRoman(41), "XLI");
	ck_assert_str_eq( intToRoman(49), "XLIX");
	ck_assert_str_eq( intToRoman(50), "L");
	ck_assert_str_eq( intToRoman(90), "XC");
	ck_assert_str_eq( intToRoman(100), "C");
	ck_assert_str_eq( intToRoman(400), "CD");
	ck_assert_str_eq( intToRoman(500), "D");
	ck_assert_str_eq( intToRoman(900), "CM");
	ck_assert_str_eq( intToRoman(1000), "M");
	ck_assert_str_eq( intToRoman(2516), "MMDXVI");

#test checkInvalidValues
	ck_assert_ptr_eq( intToRoman(6000), 0);


